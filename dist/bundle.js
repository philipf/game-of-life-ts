!function(t){var X={};function e(n){if(X[n])return X[n].exports;var r=X[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,e),r.l=!0,r.exports}e.m=t,e.c=X,e.d=function(t,X,n){e.o(t,X)||Object.defineProperty(t,X,{enumerable:!0,get:n})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,X){if(1&X&&(t=e(t)),8&X)return t;if(4&X&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(e.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&X&&"string"!=typeof t)for(var r in t)e.d(n,r,function(X){return t[X]}.bind(null,r));return n},e.n=function(t){var X=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(X,"a",X),X},e.o=function(t,X){return Object.prototype.hasOwnProperty.call(t,X)},e.p="",e(e.s=0)}([function(t,X,e){"use strict";function n(t){var X=t.myState,e=t.count;return!(!X||2!=e&&3!=e)||!X&&3==e}e.r(X);var r=function(){function t(t){this.gridModel=t}return t.prototype.getNeighbours=function(t,X){for(var e={count:0,states:[],myState:this.read(t,X)},n=0,r=-1;r<2;r++)for(var i=-1;i<2;i++){var o=t+i,u=X+r,a=this.read(o,u);if(e.states[n]=a,!(t===o&&X===u)&&a&&e.count++,e.count>3)return e;n++}return e},t.prototype.read=function(t,X){return!(t<0||t>=this.gridModel.width)&&(!(X<0||X>=this.gridModel.height)&&this.gridModel.getValue(t,X))},t}(),i=function(){function t(t,X){this.height=t,this.width=X,this.state=[]}return t.prototype.setValue=function(t,X,e){if(t>=this.width||X>=this.height)throw"Outside of grid boundary. Grid size["+this.width+","+this.height+"] but trying to set ["+t+","+X+"]";this.state[t]||(this.state[t]=[]),this.state[t][X]=e},t.prototype.getValue=function(t,X){if(!this.state||!this.state[t])return!1;var e=this.state[t][X];return e||!1},t}(),o=function(t,X,e){this.x=t,this.y=X,this.state=e},u=function(){function t(t,X){this.currentState=new i(t,X),this.gridReader=new r(this.currentState)}return t.prototype.tick=function(){for(var t=new Array,X=0;X<this.currentState.height;X++)for(var e=0;e<this.currentState.width;e++){var r=this.gridReader.getNeighbours(e,X),i=r.myState,u=n(r);i!=u&&t.push(new o(e,X,u))}return this.applyChanges(t),t},t.prototype.applyChanges=function(t){var X=this;t.forEach((function(t){X.currentState.setValue(t.x,t.y,t.state)}))},t}(),a=function(){function t(){}return t.create=function(t,X,e){void 0===X&&(X=0),void 0===e&&(e=0),t=t.trim();var n=new Array,r=t.split(/\r?\n/),i=0;return r.forEach((function(t){var r=t.trim().split(","),u=0;r.forEach((function(t){"x"==t.toLowerCase()&&n.push(new o(X+u,e+i,!0)),u++})),i++})),n},t}();function s(t,X){X.forEach((function(X){var e=10*X.x+1*X.x,n=10*X.y+1*X.y;X.state?t.fillRect(e,n,10,10):t.clearRect(e,n,10,10)}))}document.addEventListener("DOMContentLoaded",(function(){var t=new u(50,100),X=a.create("\n    ,,,,,,,X,X,X,X,X,X,,,,,,,,,X,X,X,X,X,X,X,,,,,,,,,,,,,,X,X,X,X,X,X,,,\n    ,,,,,,X,,,,,,X,,,,,,,X,X,,,,,,,,X,X,,,,,,,,,,,X,,,,,,X,,,\n    ,,,,,X,,,,,,,X,,,,,X,X,,,,,,,,,,,,X,X,,,,,,,,X,,,,,,,X,,,\n    ,,,,X,,,,X,X,,,X,,,,X,,,,,,,X,X,X,,,,,,,X,,,,,,X,,,,X,X,,,X,,,\n    ,,,X,,,,X,,X,,,X,,,,X,,,,,,X,,,,X,,,,,,X,,,,,X,,,,X,,X,,,X,,,\n    ,,X,,,,X,,,X,,,X,,,,X,,,,,X,,,,,,X,,,,,X,,,,X,,,,X,,,X,,,X,,,\n    ,X,,,,X,,,,X,,,X,,,,X,,,,,X,,,,,,X,,,,,X,,,X,,,,X,,,,X,,,X,,,\n    X,,,,X,X,X,X,X,X,,,X,X,X,,X,,,,,X,,,,,,X,,,,,X,,X,,,,X,X,X,X,X,X,,,X,X,X,\n    X,,,,,,,,,,,,,,X,,X,,,,,X,,,,,,X,,,,,X,,X,,,,,,,,,,,,,,X,\n    X,,,,,,,,,,,,,,x,,X,,,,,X,,,,,,X,,,,,X,,X,,,,,,,,,,,,,,x,\n    X,X,X,X,X,X,X,X,X,,,,X,X,X,,X,,,,,X,,,,,,X,,,,,X,,X,X,X,X,X,X,X,X,X,,,,X,X,X,\n    ,,,,,,,,X,,,,X,,,,X,,,,,X,,,,,,X,,,,,X,,,,,,,,,,X,,,,X,,,\n    ,,,,,,,,X,,,,X,,,,X,,,,,,X,,,,X,,,,,,X,,,,,,,,,,X,,,,X,,,\n    ,,,,,,,,X,,,,X,,,,X,,,,,,,X,X,X,,,,,,,X,,,,,,,,,,X,,,,X,,,\n    ,,,,,,,X,X,,,,X,X,,,,X,X,,,,,,,,,,,,X,X,,,,,,,,,,X,X,,,,X,X,,\n    ,,,,,,,X,,,,,,X,,,,,,X,X,,,,,,,,X,X,,,,,,,,,,,,X,,,,,,X,,\n    ,,,,,,,X,X,X,X,X,X,X,,,,,,,,X,X,X,X,X,X,X,,,,,,,,,,,,,,X,X,X,X,X,X,X,,\n    \n    ",13,12);t.applyChanges(X);var e=document.getElementById("grid");e||console.log("oops no canvas ");var n=e.getContext("2d");if(n){n.fillStyle="#515151";var r=n;s(r,X),setTimeout((function(){setInterval((function(){X=t.tick(),s(r,X)}),200)}),2e3)}}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,